// Code generated by protoc-gen-granted-rpc-go. DO NOT EDIT.

package example

import (
	"context"
	"encoding/json"
	"fmt"
	"google.golang.org/protobuf/encoding/protojson"
	"github.com/chrnorm/granted-rpc-go"
)

// These constants are the fully-qualified names of the RPCs defined in this package.
const (
	// EchoServiceSayHelloProcedure is the fully-qualified name of the EchoService's SayHello RPC.
	EchoServiceSayHelloProcedure = "/example.EchoService/SayHello"
)

// Some example docs about our service.
type EchoServiceHandler interface {
	// Says hello.
	SayHello(ctx context.Context, req *SayHelloRequest) (*SayHelloResponse, error)
}

// Some example docs about our service.
type EchoServiceClient struct {
	t grantedrpc.Transport
}

func NewEchoServiceClient(t grantedrpc.Transport) *EchoServiceClient {
	return &EchoServiceClient{t: t}
}

func RegisterEchoService(r *grantedrpc.Router, svc EchoServiceHandler) {
	r.Register(EchoServiceSayHelloProcedure, new(SayHelloRequest), new(SayHelloResponse), svc.SayHello)
}

// Says hello.
func (c *EchoServiceClient) SayHello(ctx context.Context, req *SayHelloRequest) (*SayHelloResponse, error) {
	reqJson, err := protojson.Marshal(req)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	msg := grantedrpc.Message{
		Procedure: EchoServiceSayHelloProcedure,
		Request:   reqJson,
	}

	inputJson, err := json.Marshal(msg)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal wrapper: %w", err)
	}

	respJson, err := c.t.SendMessage(ctx, string(inputJson))
	if err != nil {
		return nil, err
	}

	var respMsg grantedrpc.Message

	if err := json.Unmarshal([]byte(respJson), &respMsg); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response wrapper: %w", err)
	}

	if respMsg.Error != nil {
		return nil, respMsg.Error
	}

	if respMsg.Procedure != EchoServiceSayHelloProcedure {
		return nil, fmt.Errorf("mismatched procedure in response: got %s want %s", respMsg.Procedure, EchoServiceSayHelloProcedure)
	}

	resp := new(SayHelloResponse)
	if err := protojson.Unmarshal(respMsg.Response, resp); err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %w", err)
	}

	return resp, nil
}
